name: ovn-ci

on:
  merge_group:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'

permissions:
  contents: read

concurrency:
  group: ovn-ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.19.6"
  K8S_VERSION: v1.24.0
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

  # This must be a directory
  CI_IMAGE_CACHE: tmp/image_cache/
  CI_IMAGE_MASTER_TAR: image-master.tar
  CI_IMAGE_PR_TAR: image-pr.tar
  CI_DIST_IMAGES_OUTPUT: dist/images/_output/


jobs:
  # separate job for parallelism
  build-pr:
    name: Build-PR
    runs-on: ubuntu-latest
    steps:
    # Create a cache for the build PR image
    - name: Restore PR image cache
      id: image_cache_pr
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CI_IMAGE_CACHE }}
        key: ${{ github.run_id }}-image-cache-pr

    - name: Check if PR image build is needed
      id: is_pr_image_build_needed
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
            mkdir -p ${CI_DIST_IMAGES_OUTPUT}
            cp ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            gunzip ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            echo "::set-output name=PR_IMAGE_RESTORED::true"
        fi

    # only run the following steps if the PR image was not found in the cache
    - name: Set up Go
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/checkout@v3

    - name: Build and Test - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        set -x
        pushd go-controller
           # exit early if there are gofmt issues
           # make gofmt
           make
           # make windows
           # COVERALLS=1 CONTAINER_RUNNABLE=1 make check
        popd

    - name: Build docker image - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:pr -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:pr > _output/${CI_IMAGE_PR_TAR}
        popd

    - name: Cache PR image
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR} ]; then
            rm -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}
        fi
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
           rm -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz
        fi
        mkdir -p ${CI_IMAGE_CACHE}/
        cp ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR} ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}
        gzip ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}

    # run the following if none of the previous steps failed
    - uses: actions/upload-artifact@v3
      with:
        name: test-image-pr
        path: ${{ env.CI_DIST_IMAGES_OUTPUT }}/${{ env.CI_IMAGE_PR_TAR }}

  e2e-dual-conversion:
    name: e2e-dual-conversion
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # - {"ha": "HA", "interconnect": "interconnect-disabled"}
          - {"ha": "noHA", "interconnect": "interconnect-single-node-zones", "num-zones": "3", "num-nodes-per-zone": "1"}
          # - {"ha": "noHA", "interconnect": "interconnect-multi-node-zones", "num-zones": "2", "num-nodes-per-zone": "2"}
    needs: [ build-pr ]
    env:
      JOB_NAME: "DualStack-conversion-shared-${{ matrix.ha }}-${{ matrix.interconnect }}"
      OVN_HA: "${{ matrix.ha == 'HA' }}"
      KIND_IPV4_SUPPORT: "true"
      KIND_IPV6_SUPPORT: "false"
      OVN_HYBRID_OVERLAY_ENABLE: "false"
      OVN_GATEWAY_MODE: "shared"
      OVN_MULTICAST_ENABLE:  "false"
      DUALSTACK_CONVERSION:  "true"
      OVN_ENABLE_INTERCONNECT: "${{ matrix.interconnect == 'interconnect-single-node-zones' ||  matrix.interconnect == 'interconnect-multi-node-zones'}}"
      KIND_NUM_ZONES: "${{ matrix.num-zones }}"
      KIND_NUM_NODES_PER_ZONE: "${{ matrix.num-nodes-per-zone }}"
    steps:

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "$GOPATH/bin" >> $GITHUB_PATH

    - name: Disable ufw
      # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
      # Not needed for KIND deployments, so just disable all the time.
      run: |
        sudo ufw disable

    - name: Download test-image-pr
      uses: actions/download-artifact@v3
      with:
        name: test-image-pr

    - name: Load docker image
      run: |
        docker load --input ${CI_IMAGE_PR_TAR}

    - name: kind IPv4 setup
      run: |
        export OVN_IMAGE="ovn-daemonset-f:pr"
        make -C test install-kind

    - name: Convert IPv4 cluster to Dual Stack
      run: |
        ./contrib/kind-dual-stack-conversion.sh

    - name: Run Dual-Stack Tests
      run: |
        make -C test shard-test WHAT="Networking Granular Checks\|DualStack"

    - name: Run Dual-Stack Control-Plane Tests
      run: |
        make -C test control-plane WHAT="DualStack"

    - name: Export kind logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs

    - name: Upload kind logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/logs

    - name: Export ovn dbs
      if: ${{ failure() }}
      run: |
        mkdir -p /tmp/kind/ovndbs
        for node in ovn-control-plane ovn-worker ovn-worker2
        do for db in ovnnb_db.db ovnsb_db.db
          do docker cp ${node}:/var/lib/openvswitch/${db} /tmp/kind/ovndbs/${node}_${db} ||:
          done
        done

    - name: Upload ovn dbs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: kind-ovndbs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/ovndbs
