name: ovn-ci

on:
  merge_group:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ovn-ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO_VERSION: 1.22.0
  K8S_VERSION: v1.31.0
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

  # This must be a directory
  CI_IMAGE_CACHE: tmp/image_cache/
  CI_IMAGE_MASTER_TAR: image-master.tar
  CI_IMAGE_PR_TAR: image-pr.tar
  CI_DIST_IMAGES_OUTPUT: dist/images/_output/


jobs:
  build-pr:
    name: Build-PR
    runs-on: ubuntu-22.04
    steps:
    # Create a cache for the build PR image
    - name: Restore PR image cache
      id: image_cache_pr
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.CI_IMAGE_CACHE }}
        key: ${{ github.run_id }}-image-cache-pr

    - name: Check if PR image build is needed
      id: is_pr_image_build_needed
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
            mkdir -p ${CI_DIST_IMAGES_OUTPUT}
            cp ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            gunzip ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            echo "PR_IMAGE_RESTORED=true" >> "$GITHUB_OUTPUT"
        fi

    # only run the following steps if the PR image was not found in the cache
    - name: Check out code into the Go module directory - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/checkout@v4

    - name: Set up Go
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: "**/*.sum"
      id: go

    - name: Install VRF kernel module
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        set -x
        sudo apt-get install linux-modules-extra-$(uname -r) -y
        sudo modprobe vrf

    - name: Build and Test - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        set -x
        pushd go-controller
           # exit early if there are gofmt or go mod / vendor issues
           make gofmt
           make verify-go-mod-vendor
           make
           make windows
           COVERALLS=1 CONTAINER_RUNNABLE=1 make check
        popd

