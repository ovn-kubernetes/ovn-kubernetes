name: ovn-ci

on:
  merge_group:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ovn-ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.21"
  K8S_VERSION: v1.29.2
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

  # This must be a directory
  CI_IMAGE_CACHE: tmp/image_cache/
  CI_IMAGE_PR_TAR: image-pr.tar
  CI_DIST_IMAGES_OUTPUT: dist/images/_output/


jobs:
  # separate job for parallelism
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: "**/*.sum"
      id: go

    - name: Verify
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.56.1
        working-directory: go-controller
        args: --modules-download-mode=vendor --timeout=15m0s --verbose

  build-pr:
    name: Build-PR
    runs-on: ubuntu-latest
    steps:
    # Create a cache for the build PR image
    - name: Restore PR image cache
      id: image_cache_pr
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.CI_IMAGE_CACHE }}
        key: ${{ github.run_id }}-image-cache-pr

    - name: Check if PR image build is needed
      id: is_pr_image_build_needed
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
            mkdir -p ${CI_DIST_IMAGES_OUTPUT}
            cp ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            gunzip ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            echo "PR_IMAGE_RESTORED=true" >> "$GITHUB_OUTPUT"
        fi

    # only run the following steps if the PR image was not found in the cache
    - name: Check out code into the Go module directory - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/checkout@v4

    - name: Set up Go
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: "**/*.sum"
      id: go

    - name: Build and Test - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        set -x
        pushd go-controller
           # exit early if there are gofmt issues
           make gofmt
           make
           make windows
           COVERALLS=1 CONTAINER_RUNNABLE=1 make check
        popd

    - name: Build docker image - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          sudo cp -f ../../go-controller/_output/go/bin/hybrid-overlay-node .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-fedora:pr -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-fedora:pr > _output/${CI_IMAGE_PR_TAR}
        popd

    - name: Submit code coverage to Coveralls
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      continue-on-error: true
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GO111MODULE: off
      run: |
        set -x
        go get github.com/mattn/goveralls
        go get github.com/modocache/gover
        PATH=$PATH:$(go env GOPATH)/bin

        mkdir -p $(go env GOPATH)/src/github.com/ovn-org
        ln -sf $(pwd) $(go env GOPATH)/src/github.com/ovn-org/ovn-kubernetes

        gover
        goveralls -coverprofile=gover.coverprofile -service=github

    - name: Cache PR image
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR} ]; then
            rm -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}
        fi
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
           rm -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz
        fi
        mkdir -p ${CI_IMAGE_CACHE}/
        cp ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR} ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}
        gzip ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}

    # run the following if none of the previous steps failed
    - uses: actions/upload-artifact@v4
      with:
        name: test-image-pr
        path: ${{ env.CI_DIST_IMAGES_OUTPUT }}/${{ env.CI_IMAGE_PR_TAR }}

  ovn-upgrade-e2e-from-last-release:
    name: Upgrade OVN from latest release to PR branch based image
    #if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs:
      - build-pr
    strategy:
      fail-fast: false
      matrix:
        gateway-mode: [shared]
    env:
      JOB_NAME: "Upgrade-Tests-From-Last-Release-${{ matrix.gateway-mode }}"
      OVN_HA: "false"
      KIND_IPV4_SUPPORT: "true"
      KIND_IPV6_SUPPORT: "false"
      OVN_HYBRID_OVERLAY_ENABLE: "false"
      OVN_GATEWAY_MODE: "${{ matrix.gateway-mode }}"
      OVN_MULTICAST_ENABLE:  "false"
    steps:
    - name: Check out code into the Go module directory - from Master branch
      uses: actions/checkout@v4
      with:
          ref: master

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: "**/*.sum"
      id: go

    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "$GOPATH/bin" >> $GITHUB_PATH

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/local/lib/android/sdk
        sudo apt-get update
        sudo eatmydata apt-get purge --auto-remove -y \
          azure-cli aspnetcore-* dotnet-* ghc-* firefox \
          google-chrome-stable \
          llvm-* microsoft-edge-stable mono-* \
          msbuild mysql-server-core-* php-* php7* \
          powershell temurin-* zulu-*

    - name: Disable ufw
      # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
      # Not needed for KIND deployments, so just disable all the time.
      run: |
        sudo ufw disable

    - name: kind setup
      run: |
        export OVN_IMAGE="ghcr.io/ovn-org/ovn-kubernetes/ovn-kube-fedora:release-1.0"
        make -C test install-kind

    - name: Export kind logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs
        set -x
        docker ps -a
        docker exec ovn-control-plane crictl images
        docker exec ovn-worker crictl images
        docker exec ovn-worker2 crictl images

    - name: Upload kind logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/logs

    - name: Check out code into the Go module directory - from PR branch
      uses: actions/checkout@v4

    - name: Runner Diagnostics
      uses: ./.github/actions/diagnostics

    - name: ovn upgrade
      run: |
        export OVN_IMAGE="ovn-daemonset-fedora:pr"
        make -C test upgrade-ovn

    - name: Runner Diagnostics
      uses: ./.github/actions/diagnostics

    - name: Run E2E shard-conformance
      run: |
        make -C test shard-conformance

    - name: Runner Diagnostics
      uses: ./.github/actions/diagnostics

    - name: Export kind logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs-kind-pr-branch
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs-kind-pr-branch

    - name: Upload kind logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}-after-upgrade
        path: /tmp/kind/logs-kind-pr-branch
