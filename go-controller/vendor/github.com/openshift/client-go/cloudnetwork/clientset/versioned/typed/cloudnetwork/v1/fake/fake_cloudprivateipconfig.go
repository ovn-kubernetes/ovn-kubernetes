// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/cloudnetwork/v1"
	cloudnetworkv1 "github.com/openshift/client-go/cloudnetwork/applyconfigurations/cloudnetwork/v1"
	typedcloudnetworkv1 "github.com/openshift/client-go/cloudnetwork/clientset/versioned/typed/cloudnetwork/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCloudPrivateIPConfigs implements CloudPrivateIPConfigInterface
type fakeCloudPrivateIPConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1.CloudPrivateIPConfig, *v1.CloudPrivateIPConfigList, *cloudnetworkv1.CloudPrivateIPConfigApplyConfiguration]
	Fake *FakeCloudV1
}

func newFakeCloudPrivateIPConfigs(fake *FakeCloudV1) typedcloudnetworkv1.CloudPrivateIPConfigInterface {
	return &fakeCloudPrivateIPConfigs{
		gentype.NewFakeClientWithListAndApply[*v1.CloudPrivateIPConfig, *v1.CloudPrivateIPConfigList, *cloudnetworkv1.CloudPrivateIPConfigApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("cloudprivateipconfigs"),
			v1.SchemeGroupVersion.WithKind("CloudPrivateIPConfig"),
			func() *v1.CloudPrivateIPConfig { return &v1.CloudPrivateIPConfig{} },
			func() *v1.CloudPrivateIPConfigList { return &v1.CloudPrivateIPConfigList{} },
			func(dst, src *v1.CloudPrivateIPConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1.CloudPrivateIPConfigList) []*v1.CloudPrivateIPConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.CloudPrivateIPConfigList, items []*v1.CloudPrivateIPConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
