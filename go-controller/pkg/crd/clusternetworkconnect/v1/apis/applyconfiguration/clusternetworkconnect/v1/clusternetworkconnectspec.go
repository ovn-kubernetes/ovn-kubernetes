/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	clusternetworkconnectv1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/clusternetworkconnect/v1"
	types "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/types"
)

// ClusterNetworkConnectSpecApplyConfiguration represents a declarative configuration of the ClusterNetworkConnectSpec type for use
// with apply.
type ClusterNetworkConnectSpecApplyConfiguration struct {
	NetworkSelectors    *types.NetworkSelectors                    `json:"networkSelectors,omitempty"`
	ConnectSubnets      []ConnectSubnetApplyConfiguration          `json:"connectSubnets,omitempty"`
	ConnectivityEnabled []clusternetworkconnectv1.ConnectivityType `json:"connectivityEnabled,omitempty"`
}

// ClusterNetworkConnectSpecApplyConfiguration constructs a declarative configuration of the ClusterNetworkConnectSpec type for use with
// apply.
func ClusterNetworkConnectSpec() *ClusterNetworkConnectSpecApplyConfiguration {
	return &ClusterNetworkConnectSpecApplyConfiguration{}
}

// WithNetworkSelectors sets the NetworkSelectors field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkSelectors field is set to the value of the last call.
func (b *ClusterNetworkConnectSpecApplyConfiguration) WithNetworkSelectors(value types.NetworkSelectors) *ClusterNetworkConnectSpecApplyConfiguration {
	b.NetworkSelectors = &value
	return b
}

// WithConnectSubnets adds the given value to the ConnectSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConnectSubnets field.
func (b *ClusterNetworkConnectSpecApplyConfiguration) WithConnectSubnets(values ...*ConnectSubnetApplyConfiguration) *ClusterNetworkConnectSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConnectSubnets")
		}
		b.ConnectSubnets = append(b.ConnectSubnets, *values[i])
	}
	return b
}

// WithConnectivityEnabled adds the given value to the ConnectivityEnabled field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConnectivityEnabled field.
func (b *ClusterNetworkConnectSpecApplyConfiguration) WithConnectivityEnabled(values ...clusternetworkconnectv1.ConnectivityType) *ClusterNetworkConnectSpecApplyConfiguration {
	for i := range values {
		b.ConnectivityEnabled = append(b.ConnectivityEnabled, values[i])
	}
	return b
}
